// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, _, conf, ec2Client, ec2KeyManagement, handlers;

  _ = require('underscore');

  conf = require('./config');

  ec2Client = require('./ec2Client');

  ec2KeyManagement = require('./ec2KeyManagement');

  Promise = require('pantheon-helpers/lib/promise');

  handlers = {
    cluster: {
      'c+': function(event, doc) {
        var instance_promises;
        instance_promises = {};
        _.each(event.record.instances, function(event_instance) {
          var instance;
          instance = _.findWhere(doc.instances, {
            id: event_instance.id
          });
          if (instance && (!instance.state || instance.state.indexOf('terminate') < 0) && (instance.aws_id == null)) {
            event_instance.ClientToken = instance.id;
            return instance_promises[event_instance.id] = ec2Client.createInstance(event_instance).then(function(result) {
              var ref;
              if (!((ref = event.record.keys) != null ? ref.length : void 0) > 0) {
                return Promise.resolve(result);
              }
              return Promise.setTimeout((conf.AWS.STARTUP_SECONDS || 30) * 1000).then((function(_this) {
                return function() {
                  ec2KeyManagement.addSSHKeys(result.PrivateIpAddress, event.record.keys);
                  return Promise.resolve(result);
                };
              })(this));
            });
          }
        });
        if (_.isEmpty(instance_promises)) {
          return Promise.resolve();
        }
        return Promise.hashResolveAll(instance_promises).then(function(results) {
          var failed;
          failed = false;
          _.each(results, function(result, instance_id) {
            var instance;
            instance = _.findWhere(doc.instances, {
              id: instance_id
            });
            if (result.state === 'resolved') {
              instance.aws_id = result.value.InstanceId;
              instance.ip = result.value.PrivateIpAddress;
              return delete instance.error;
            } else {
              instance.state = 'create_failed';
              instance.error = result.error;
              return failed = true;
            }
          });
          if (failed) {
            return Promise.reject({
              error: results,
              data: {
                instances: doc.instances
              },
              path: []
            });
          } else {
            return Promise.resolve({
              data: {
                instances: doc.instances
              },
              path: []
            });
          }
        });
      },
      'c-': function(event, doc) {
        var instance_promises;
        if (_.isEmpty(doc.instances)) {
          return Promise.resolve();
        }
        instance_promises = {};
        _.each(doc.instances, function(instance) {
          if (instance.aws_id !== void 0) {
            return instance_promises[instance.id] = ec2Client.destroyInstance(instance.aws_id);
          } else {
            return instance_promises[instance.id] = Promise.resolve();
          }
        });
        return Promise.hashResolveAll(instance_promises).then(function(results) {
          var failed;
          failed = false;
          _.each(results, function(result, instance_id) {
            var instance;
            instance = _.findWhere(doc.instances, {
              id: instance_id
            });
            if (instance.aws_id == null) {
              return null;
            } else if (result.state === 'resolved') {
              return doc.instances.splice(doc.instances.indexOf(instance), 1);
            } else {
              instance.error = result.error;
              instance.state = 'terminate_failed';
              return failed = true;
            }
          });
          if (failed) {
            return Promise.reject({
              error: results,
              data: {
                instances: doc.instances
              },
              path: []
            });
          } else {
            return Promise.resolve({
              data: {
                instances: doc.instances
              },
              path: []
            });
          }
        });
      }
    }
  };

  module.exports = handlers;

}).call(this);
