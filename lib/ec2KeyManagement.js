// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, conf, fs, getAddCommand, getRemoveCommand, isPubKeyValid, keys, ssh, sshConnect;

  Promise = require('pantheon-helpers/lib/promise');

  conf = require('./config');

  ssh = require('promised-ssh');

  fs = require('fs');

  keys = {};

  isPubKeyValid = function(pubkey) {
    return pubkey.match(/^ssh-rsa AAAA[0-9A-Za-z+\/]+[=]{0,3} [0-9A-Za-z.-]+(@[0-9A-Za-z.-]+)?$/);
  };

  getAddCommand = function(pubkey) {
    return 'grepl "' + pubkey + '" .ssh/authorized_keys || echo "' + pubkey + '" >> .ssh/authorized_keys';
  };

  getRemoveCommand = function(pubkey) {
    return 'sed -i "\\|' + pubkey + '|d" .ssh/authorized_keys';
  };

  sshConnect = function(host) {
    var keyfile;
    keyfile = conf.AWS.PRIVATE_KEY_FILE || (process.env.HOME + '/.ssh/id_rsa');
    return ssh.connect({
      host: host,
      username: conf.AWS.SSH_USER || 'ec2-user',
      privateKey: fs.readFileSync(keyfile)
    });
  };

  keys.addSSHKeys = function(host, pubkeys) {
    var i, len, pubkey;
    for (i = 0, len = pubkeys.length; i < len; i++) {
      pubkey = pubkeys[i];
      console.log("GOT KEY " + pubkey);
      if (!isPubKeyValid(pubkey)) {
        return Promise.reject('Invalid public key ' + pubkey);
        console.log("REJECTED " + pubkey);
      }
    }
    console.log("Attempting to log into " + host);
    return sshConnect(host).then(function(connection) {
      var pubkeyCmds;
      pubkeyCmds = pubkeys.map(getAddCommand);
      console.log("adding keys " + pubkeyCmds);
      return connection.exec(pubkeyCmds);
    })["catch"](function(err) {
      console.log("Failure!! ");
      console.log(err);
      return Promise.reject(err);
    });
  };

  keys.removeSSHKeys = function(host, pubkeys) {
    var i, len, pubkey;
    for (i = 0, len = pubkeys.length; i < len; i++) {
      pubkey = pubkeys[i];
      if (!isPubKeyValid(pubkey)) {
        return Promise.reject('Invalid public key ' + pubkey);
      }
    }
    return sshConnect(host).then(function(connection) {
      var pubkeyCmds;
      pubkeyCmds = pubkeys.map(getRemoveCommand);
      return connection.exec(pubkeyCmds);
    });
  };

  module.exports = keys;

}).call(this);
