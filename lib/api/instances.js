// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, aws, conf, ec2, ec2PromiseClient, instances, prepareInstances, _,
    __slice = [].slice;

  _ = require('underscore');

  Promise = require('promise');

  aws = require('aws-sdk');

  conf = require('../config');

  prepareInstances = function(resp_object) {
    var fields, instance, instance_list, reservation, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    fields = ['InstanceId', 'InstanceType', 'PrivateIpAddress', 'State', 'Tags'];
    instance_list = [];
    if (resp_object.Reservations !== void 0) {
      _ref = resp_object.Reservations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reservation = _ref[_i];
        _ref1 = reservation.Instances;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          instance = _ref1[_j];
          instance_list.push(_.pick.apply(_, [instance].concat(__slice.call(fields))));
        }
      }
    } else {
      _ref2 = resp_object.Instances;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        instance = _ref2[_k];
        instance_list.push(_.pick.apply(_, [instance].concat(__slice.call(fields))));
      }
    }
    return instance_list;
  };

  instances = {};

  ec2PromiseClient = function(ec2_opts) {
    var client, ec2;
    ec2 = new aws.EC2(ec2_opts);
    client = {};
    ['createTags', 'describeInstances', 'runInstances', 'terminateInstances'].forEach(function(method) {
      return client[method] = Promise.denodeify(ec2[method]).bind(ec2);
    });
    return client;
  };

  ec2 = ec2PromiseClient({
    apiVersion: conf.AWS.APIVERSION,
    accessKeyId: conf.AWS.ACCESS_KEY,
    secretAccessKey: conf.AWS.SECRET_KEY,
    region: conf.AWS.REGION
  });

  instances.create_instance = function(opts) {
    var instance_params, required_params, required_tags, tags, user_params, user_tags;
    instance_params = {
      InstanceType: conf.AWS.INSTANCETYPE,
      UserData: ''
    };
    required_params = {
      ImageId: conf.AWS.IMAGEID,
      MaxCount: 1,
      MinCount: 1,
      KeyName: conf.AWS.KEYNAME,
      SubnetId: conf.AWS.SUBNETID,
      SecurityGroupIds: conf.AWS.SECURITYGROUPIDS
    };
    user_params = _.pick(opts, 'InstanceType', 'UserData');
    _.extend(instance_params, user_params, required_params);
    tags = {
      Name: "AWSDEVMOIRAI",
      Application: '',
      Creator: 'default.user@example.com',
      Software: '',
      BusinessOwner: '',
      Description: ''
    };
    user_tags = _.pick(opts.tags, 'Application', 'Name');
    required_tags = {
      Domain: 'dev',
      PuppetRole: '',
      SysAdmin: 'SE',
      CreateDate: new Date().toISOString().split('T')[0]
    };
    _.extend(tags, user_tags, required_tags);
    return ec2.runInstances(instance_params).then(function(data) {
      var key, preparedInstance, tag_params, value;
      tag_params = {
        Resources: [data.Instances[0].InstanceId],
        Tags: (function() {
          var _results;
          _results = [];
          for (key in tags) {
            value = tags[key];
            _results.push({
              'Key': key,
              'Value': value
            });
          }
          return _results;
        })()
      };
      preparedInstance = prepareInstances(data)[0];
      console.log(tags);
      console.log(tag_params);
      return ec2.createTags(tag_params)["catch"](function(err) {
        return Promise.reject(err);
      }).then(function() {
        preparedInstance.Tags = tag_params.Tags;
        return Promise.resolve(preparedInstance);
      });
    });
  };

  instances.handle_create_instance = function(req, resp) {
    var all_opts;
    all_opts = req.body || {};
    return instances.create_instance(req.couch, all_opts).then(function(cluster_doc) {
      return resp.status(201).send(JSON.stringify(cluster_doc));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  instances.get_instances = function() {
    var params;
    params = {
      Filters: [
        {
          Name: 'key-name',
          Values: [conf.AWS.KEYNAME]
        }
      ]
    };
    return ec2.describeInstances(params).then(function(data) {
      return Promise.resolve(prepareInstances(data));
    });
  };

  instances.handle_get_instances = function(req, resp) {
    return instances.get_instances().then(function(data) {
      return resp.status(201).send(JSON.stringify(data));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  instances.get_instance = function(instance_id) {
    var params;
    params = {
      InstanceIds: [instance_id]
    };
    return ec2.describeInstances(params).then(function(data) {
      return Promise.resolve(prepareInstances(data)[0]);
    });
  };

  instances.handle_get_instance = function(req, resp) {
    var instance_id;
    instance_id = req.params.instance_id;
    return instances.get_instance(instance_id).then(function(data) {
      return resp.status(201).send(JSON.stringify(data));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  instances.handle_update_instance = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  instances.destroy_instance = function(instance_id) {
    var params;
    params = {
      InstanceIds: [instance_id]
    };
    return ec2.terminateInstances(params);
  };

  instances.handle_destroy_instance = function(req, resp) {
    var instance_id;
    instance_id = req.params.instance_id;
    return instances.destroy_instance(instance_id).then(function(data) {
      return resp.status(201).send(JSON.stringify(data));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  module.exports = instances;

}).call(this);
