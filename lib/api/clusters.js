// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Promise, clusters, couch_utils, instances, _;

  _ = require('underscore');

  Promise = require('promise');

  instances = require('./instances');

  couch_utils = require('../couch_utils');

  clusters = {};

  clusters.get_cluster = function(db_client, cluster_id) {
    return Promise.denodeify(couch_utils.ensure_db)(db_client, 'get', cluster_id);
  };

  clusters.handle_get_cluster = function(req, resp) {
    var client, cluster_id;
    cluster_id = req.params.cluster_id;
    client = req.couch.use('moirai');
    return clusters.get_cluster(client, cluster_id).then(function(couch_resp) {
      return resp.status(201).send(JSON.stringify(couch_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.create_cluster = function(db_client, opts) {
    return Promise.all(opts.instances.map(instances.create_instance)).then(function(created_instances) {
      var cluster, ensure_db;
      cluster = {
        instances: created_instances
      };
      ensure_db = Promise.denodeify(couch_utils.ensure_db);
      return ensure_db(db_client, 'insert', cluster).then(function(couch_resp) {
        return Promise.resolve(_.extend(cluster, {
          _id: couch_resp.id,
          _rev: couch_resp.rev
        }));
      })["catch"](function(err) {
        return Promise.reject(err);
      });
    })["catch"](function(err) {
      return Promise.reject(err);
    });
  };

  clusters.handle_create_cluster = function(req, resp) {
    var cluster_opts, create_cluster;
    cluster_opts = req.body || {};
    create_cluster = Promise.denodeify(clusters.create_cluster);
    return create_cluster(req.couch.use('moirai'), cluster_opts).then(function(cluster_doc) {
      return resp.status(201).send(JSON.stringify(cluster_doc));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.get_clusters = function(db_client) {
    var params;
    params = {
      include_docs: true,
      limit: 10
    };
    return Promise.denodeify(couch_utils.ensure_db)(db_client, 'list', params).then(function(data) {
      var cluster;
      cluster = data.rows.map(function(row) {
        return row.doc;
      });
      return Promise.resolve(cluster);
    });
  };

  clusters.handle_get_clusters = function(req, resp) {
    var client;
    client = req.couch.use('moirai');
    return clusters.get_clusters(client).then(function(couch_resp) {
      return resp.status(201).send(JSON.stringify(couch_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.handle_update_cluster = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  clusters.destroy_cluster = function(db_client, cluster_id) {
    return clusters.get_cluster(db_client, cluster_id).then(function(cluster) {
      return Promise.all(cluster.instances.map(function(instance) {
        return instances.destroy_instance(instance.InstanceId);
      })).then(function(updated_instances) {
        cluster.state = 'terminated';
        cluster.instances = [];
        return Promise.denodeify(couch_utils.ensure_db)(db_client, 'insert', cluster);
      })["catch"](function(err) {
        return Promise.reject(err);
      });
    })["catch"](function(err) {
      return Promise.reject(err);
    });
  };

  clusters.handle_destroy_cluster = function(req, resp) {
    var client, cluster_id;
    cluster_id = req.params.cluster_id;
    client = req.couch.use('moirai');
    return clusters.destroy_cluster(client, cluster_id).then(function(couch_resp) {
      return resp.status(201).send(JSON.stringify(couch_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.add_instance = function(db_client, cluster_id, instance_opts) {
    return instances.create_instance(instance_opts).then(function(data) {
      return clusters.get_cluster(db_client, cluster_id).then(function(cluster) {
        console.log(cluster);
        cluster.instances.push(data);
        return Promise.denodeify(couch_utils.ensure_db)(db_client, 'insert', cluster).then(function() {
          return Promise.resolve(data);
        });
      })["catch"](function(err) {
        return Promise.reject(err);
      });
    });
  };

  clusters.handle_add_instance = function(req, resp) {
    var client, cluster_id, instance_opts;
    cluster_id = req.params.cluster_id;
    instance_opts = req.body || {};
    client = req.couch.use('moirai');
    return clusters.add_instance(client, cluster_id, instance_opts).then(function(couch_resp) {
      return resp.status(201).send(JSON.stringify(couch_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  module.exports = clusters;

}).call(this);
