// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, _, clusters, couch_utils, doAction, instances, uuid;

  _ = require('underscore');

  Promise = require('pantheon-helpers/lib/promise');

  instances = require('./instances');

  couch_utils = require('../couch_utils');

  uuid = require('node-uuid');

  doAction = require('pantheon-helpers/lib/doAction');

  clusters = {};

  clusters.get_cluster = function(db_client, cluster_id, callback) {
    return db_client.use('moirai').get(cluster_id, callback);
  };

  clusters.handle_get_cluster = function(req, resp) {
    var cluster_id;
    cluster_id = 'cluster_' + req.params.cluster_id;
    return clusters.get_cluster(req.couch, cluster_id).pipe(resp);
  };

  clusters.get_clusters = function(db_client, callback) {
    var params;
    params = {
      include_docs: true
    };
    return db_client.use('moirai').viewWithList('moirai', 'active_clusters', 'get_docs', params, callback);
  };

  clusters.handle_get_clusters = function(req, resp) {
    return clusters.get_clusters(req.couch).pipe(resp);
  };

  clusters.create_cluster = function(db, record, callback) {
    record.instances.forEach(function(instance) {
      return instance.id = uuid.v4();
    });
    record.name = "a_cluster";
    return doAction(db, 'moirai', null, {
      a: 'c+',
      record: record
    }, callback);
  };

  clusters.handle_create_cluster = function(req, resp) {
    var cluster_opts, db;
    cluster_opts = req.body || {};
    db = req.couch.use('moirai');
    return clusters.create_cluster(db, cluster_opts).pipe(resp);
  };

  clusters.destroy_cluster = function(db, cluster_id, callback) {
    return doAction(db, 'moirai', cluster_id, {
      a: 'c-'
    }, callback);
  };

  clusters.handle_destroy_cluster = function(req, resp) {
    var cluster_id, db;
    cluster_id = "cluster_" + req.params.cluster_id;
    db = req.couch.use('moirai');
    return clusters.destroy_cluster(db, cluster_id).pipe(resp);
  };

  clusters.add_instance = function(db_client, cluster_id, instance_opts) {
    return instances.create_instance(instance_opts).then(function(data) {
      return clusters.get_cluster(db_client, cluster_id).then(function(cluster) {
        cluster.instances.push(data);
        return Promise.denodeify(couch_utils.ensure_db)(db_client, 'insert', cluster).then(function() {
          return Promise.resolve(data);
        });
      })["catch"](function(err) {
        return Promise.reject(err);
      });
    });
  };

  clusters.handle_add_instance = function(req, resp) {
    var client, cluster_id, instance_opts;
    cluster_id = req.params.cluster_id;
    instance_opts = req.body || {};
    client = req.couch.use('moirai');
    return clusters.add_instance(client, cluster_id, instance_opts).then(function(couch_resp) {
      return resp.status(201).send(JSON.stringify(couch_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.handle_update_cluster = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  module.exports = clusters;

}).call(this);
