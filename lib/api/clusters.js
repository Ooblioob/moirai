// Generated by CoffeeScript 1.9.1
(function() {
  var CLUSTER_MISSING_NAME_ERROR, Promise, _, clusters, couch_utils, doAction, ec2Client, uuid;

  _ = require('underscore');

  Promise = require('pantheon-helpers/lib/promise');

  ec2Client = require('../ec2Client');

  couch_utils = require('../couch_utils');

  uuid = require('node-uuid');

  doAction = require('pantheon-helpers/lib/doAction');

  CLUSTER_MISSING_NAME_ERROR = "Cluster name not provided";

  clusters = {};

  clusters.getCluster = function(client, cluster_id, callback) {
    cluster_id = 'cluster_' + cluster_id;
    return client.use('moirai').get(cluster_id, callback);
  };

  clusters.handleGetCluster = function(req, resp) {
    return clusters.getCluster(req.couch, req.params.cluster_id).pipe(resp);
  };

  clusters.getClusters = function(client, callback) {
    var params;
    params = {
      include_docs: true
    };
    return client.use('moirai').viewWithList('moirai', 'active_clusters', 'get_docs', params, callback);
  };

  clusters.handleGetClusters = function(req, resp) {
    return clusters.getClusters(req.couch).pipe(resp);
  };

  clusters.createCluster = function(client, record) {
    if (record.name == null) {
      return Promise.reject(CLUSTER_MISSING_NAME_ERROR);
    }
    record.instances.forEach(function(instance) {
      return instance.id = uuid.v4();
    });
    return doAction(client.use('moirai'), 'moirai', null, {
      a: 'c+',
      record: record
    }, 'promise');
  };

  clusters.handleCreateCluster = function(req, resp) {
    var cluster_opts;
    cluster_opts = req.body || {};
    return clusters.createCluster(req.couch, cluster_opts).then(function(clusterData) {
      return resp.status(201).send(JSON.stringify(clusterData));
    })["catch"](function(err) {
      if (err === CLUSTER_MISSING_NAME_ERROR) {
        return resp.status(400).send(JSON.stringify({
          error: 'Bad Request',
          msg: err
        }));
      } else {
        return resp.status(500).send(JSON.stringify({
          error: 'Internal Error',
          msg: String(err)
        }));
      }
    });
  };

  clusters.destroyCluster = function(client, cluster_id, callback) {
    cluster_id = "cluster_" + cluster_id;
    return doAction(client.use('moirai'), 'moirai', cluster_id, {
      a: 'c-'
    }, callback);
  };

  clusters.handleDestroyCluster = function(req, resp) {
    return clusters.destroyCluster(req.couch, req.params.cluster_id).pipe(resp);
  };

  clusters.handleAddInstance = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  clusters.handleUpdateCluster = function(req, resp) {
    return resp.send('NOT IMPLEMENTED');
  };

  clusters.setKeys = function(client, cluster_id, keys, callback) {
    cluster_id = 'cluster_' + cluster_id;
    return doAction(client.use('moirai'), 'moirai', cluster_id, {
      a: 'k',
      keys: keys
    }, callback);
  };

  clusters.handleSetKeys = function(req, resp) {
    var keys;
    keys = req.body || [];
    return clusters.setKeys(req.couch, req.params.cluster_id, keys).pipe(resp);
  };

  clusters.startCluster = function(client, cluster_id, callback) {
    return clusters.getCluster(client, cluster_id, 'promise').then(function(cluster) {
      var awsIds;
      awsIds = _.pluck(cluster.instances, 'aws_id');
      return ec2Client.startInstances(awsIds);
    });
  };

  clusters.handleStartCluster = function(req, resp) {
    return clusters.startCluster(req.couch, req.params.cluster_id).then(function(aws_resp) {
      return resp.status(201).send(JSON.stringify(aws_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  clusters.stopCluster = function(client, cluster_id, callback) {
    return clusters.getCluster(client, cluster_id, 'promise').then(function(cluster) {
      var awsIds;
      awsIds = _.pluck(cluster.instances, 'aws_id');
      return ec2Client.stopInstances(awsIds);
    });
  };

  clusters.handleStopCluster = function(req, resp) {
    return clusters.stopCluster(req.couch, req.params.cluster_id).then(function(aws_resp) {
      return resp.status(201).send(JSON.stringify(aws_resp));
    })["catch"](function(err) {
      return resp.status(500).send(JSON.stringify({
        error: 'internal error',
        msg: String(err)
      }));
    });
  };

  module.exports = clusters;

}).call(this);
