// Generated by CoffeeScript 1.9.1
(function() {
  var Promise, _, aws, conf, ec2PromiseClient, instances,
    slice = [].slice;

  _ = require('underscore');

  Promise = require('pantheon-helpers/lib/promise');

  aws = require('aws-sdk');

  conf = require('./config');

  instances = {};

  instances.prepareInstances = function(resp_object) {
    var i, len, ref, reservation;
    if (resp_object.Reservations != null) {
      ref = resp_object.Reservations;
      for (i = 0, len = ref.length; i < len; i++) {
        reservation = ref[i];
        return reservation.Instances;
      }
    } else {
      return resp_object.Instances;
    }
  };

  ec2PromiseClient = function(ec2_opts) {
    var client, ec2;
    ec2 = new aws.EC2(ec2_opts);
    client = {};
    ['createTags', 'describeInstances', 'runInstances', 'terminateInstances'].forEach(function(method) {
      return client[method] = Promise.denodeify(ec2[method]).bind(ec2);
    });
    return client;
  };

  instances.ec2 = ec2PromiseClient({
    apiVersion: conf.AWS.APIVERSION,
    accessKeyId: conf.AWS.ACCESS_KEY,
    secretAccessKey: conf.AWS.SECRET_KEY,
    region: conf.AWS.REGION
  });

  instances.generateParams = function(opts) {
    var params, requiredParams, userParams;
    params = {};
    requiredParams = {
      MaxCount: 1,
      MinCount: 1
    };
    userParams = _.pick.apply(_, [opts].concat(slice.call(conf.AWS.USER_PARAMS)));
    _.extend(params, conf.AWS.DEFAULT_PARAMS, userParams, conf.AWS.REQUIRED_PARAMS, requiredParams);
    return params;
  };

  instances.generateTags = function(userTags) {
    var requiredTags, tags;
    tags = {
      Name: "AWSDEVMOIRAI",
      Application: '',
      Creator: 'default.user@example.com',
      Software: '',
      BusinessOwner: '',
      Description: ''
    };
    userTags = _.pick.apply(_, [userTags].concat(slice.call(conf.AWS.TAG_PARAMS)));
    requiredTags = {
      Domain: 'dev',
      PuppetRole: '',
      SysAdmin: 'SE',
      CreateDate: new Date().toISOString()
    };
    _.extend(tags, userTags, requiredTags);
    return tags;
  };

  instances.generateUserData = function(opts, params, tags) {
    var userData;
    userData = conf.AWS.USERDATA;
    userData = userData.replace('<HOSTNAME>', tags.Name);
    return userData;
  };

  instances.createInstance = function(opts) {
    var key, params, tags, tagsHash, userData, userDataText, value;
    params = instances.generateParams(opts);
    tagsHash = instances.generateTags(opts.tags);
    tags = (function() {
      var results;
      results = [];
      for (key in tagsHash) {
        value = tagsHash[key];
        results.push({
          'Key': key,
          'Value': value
        });
      }
      return results;
    })();
    userDataText = instances.generateUserData(opts, params, tags);
    userData = new Buffer(userDataText).toString('base64');
    return instances.ec2.runInstances(params).then(function(data) {
      var preparedInstance, tag_params;
      preparedInstance = instances.prepareInstances(data)[0];
      tag_params = {
        Resources: [preparedInstance.InstanceId],
        Tags: tags
      };
      return instances.ec2.createTags(tag_params)["catch"](function(err) {
        return Promise.reject(err);
      }).then(function() {
        preparedInstance.Tags = tags;
        return Promise.resolve(preparedInstance);
      });
    });
  };

  instances.getInstances = function(instanceIds) {
    var params;
    if (instanceIds == null) {
      instanceIds = void 0;
    }
    params = {
      InstanceIds: instanceIds,
      Filters: [
        {
          Name: 'key-name',
          Values: [conf.AWS.REQUIRED_PARAMS.KeyName]
        }, {
          Name: 'instance-state-name',
          Values: ['pending', 'running', 'stopping', 'stopped']
        }
      ]
    };
    return instances.ec2.describeInstances(params).then(function(data) {
      return Promise.resolve(instances.prepareInstances(data));
    });
  };

  instances.getSingleInstance = function(instance_id) {
    return instances.getInstances([instance_id]).then(function(data) {
      return Promise.resolve(data[0]);
    });
  };

  instances.destroyInstance = function(aws_id) {
    var params;
    params = {
      InstanceIds: [aws_id]
    };
    return instances.ec2.terminateInstances(params);
  };

  module.exports = instances;

}).call(this);
